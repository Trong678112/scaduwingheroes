import React, { useState, useRef } from 'react';  
import './DictionaryPage.css';  
  
function DictionaryPage() {  
  const [searchTerm, setSearchTerm] = useState('');  
  const [selectedWord, setSelectedWord] = useState(null);  
  const [loading, setLoading] = useState(false);  
  const [searchHistory, setSearchHistory] = useState([]);  
  const searchInputRef = useRef(null);  
  
  const handleSearch = async (term) => {  
    if (!term.trim()) return;  
      
    setLoading(true);  
      
    try {  
      // L·∫•y th√¥ng tin t·ª´ Free Dictionary API  
      const dictResponse = await fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${term}`);  
        
      let wordData = {  
        word: term,  
        phonetic: '',  
        meaning: '',  
        partOfSpeech: 't·ª´',  
        example: '',  
        synonyms: [],  
        antonyms: [],  
        exampleSentences: [],  
        additionalMeanings: []  
      };  
  
      if (dictResponse.ok) {  
        const dictData = await dictResponse.json();  
        const entry = dictData[0];  
          
        wordData.phonetic = entry.phonetic || entry.phonetics?.[0]?.text || '';  
        wordData.partOfSpeech = translatePartOfSpeech(entry.meanings?.[0]?.partOfSpeech) || 't·ª´';  
          
        // L·∫•y synonyms v√† antonyms  
        wordData.synonyms = entry.meanings?.[0]?.synonyms?.slice(0, 5) || [];  
        wordData.antonyms = entry.meanings?.[0]?.antonyms?.slice(0, 5) || [];  
          
        // L·∫•y nhi·ªÅu example sentences t·ª´ definitions  
        wordData.exampleSentences = entry.meanings?.[0]?.definitions  
          ?.filter(def => def.example)  
          ?.map(def => def.example)  
          ?.slice(0, 3) || [];  
          
        // L·∫•y v√≠ d·ª• t·ª´ definition ƒë·∫ßu ti√™n  
        wordData.example = entry.meanings?.[0]?.definitions?.[0]?.example || '';  
          
        // L·∫•y t·∫•t c·∫£ nghƒ©a t·ª´ c√°c meanings kh√°c nhau  
        const allMeanings = [];  
        entry.meanings?.forEach(meaning => {  
          meaning.definitions?.slice(0, 2).forEach(def => {  
            allMeanings.push(`(${translatePartOfSpeech(meaning.partOfSpeech)}) ${def.definition}`);  
          });  
        });  
          
        // D·ªãch t·ª´ ƒë∆°n gi·∫£n tr∆∞·ªõc (∆∞u ti√™n)  
        wordData.meaning = await translateToVietnamese(term);  
          
        // D·ªãch c√°c nghƒ©a chi ti·∫øt n·∫øu c·∫ßn  
        if (allMeanings.length > 0) {  
          wordData.additionalMeanings = await Promise.all(  
            allMeanings.map(meaning => translateToVietnamese(meaning))  
          );  
        }  
      } else {  
        // N·∫øu kh√¥ng t√¨m th·∫•y trong dictionary, ch·ªâ d·ªãch t·ª´ ƒë√≥  
        wordData.meaning = await translateToVietnamese(term);  
      }  
  
      setSelectedWord(wordData);  
      addToHistory(wordData);  
        
    } catch (error) {  
      console.error('L·ªói khi t√¨m ki·∫øm:', error);  
      setSelectedWord({  
        word: term,  
        phonetic: '',  
        meaning: 'L·ªói khi t√¨m ki·∫øm t·ª´ n√†y',  
        partOfSpeech: 't·ª´',  
        example: '',  
        synonyms: [],  
        antonyms: [],  
        exampleSentences: [],  
        additionalMeanings: []  
      });  
    }  
      
    setLoading(false);  
  };  
  
  // Function d·ªãch sang ti·∫øng Vi·ªát  
  const translateToVietnamese = async (text) => {  
    try {  
      const response = await fetch(  
        `https://translate.googleapis.com/translate_a/single?client=gtx&sl=en&tl=vi&dt=t&q=${encodeURIComponent(text)}`  
      );  
      const data = await response.json();  
      return data[0][0][0];  
    } catch (error) {  
      console.error('Translation error:', error);  
      return 'Kh√¥ng th·ªÉ d·ªãch sang ti·∫øng Vi·ªát';  
    }  
  };  
  
  const translatePartOfSpeech = (pos) => {  
    const translations = {  
      'noun': 'danh t·ª´',  
      'verb': 'ƒë·ªông t·ª´',  
      'adjective': 't√≠nh t·ª´',  
      'adverb': 'tr·∫°ng t·ª´',  
      'pronoun': 'ƒë·∫°i t·ª´',  
      'preposition': 'gi·ªõi t·ª´',  
      'conjunction': 'li√™n t·ª´',  
      'interjection': 'th√°n t·ª´'  
    };  
    return translations[pos] || pos || 't·ª´';  
  };  
  
  const addToHistory = (word) => {  
    setSearchHistory(prev => {  
      const filtered = prev.filter(item => item.word !== word.word);  
      return [word, ...filtered].slice(0, 10);  
    });  
  };  
  
  const clearHistory = () => {  
    setSearchHistory([]);  
  };  
  
  const removeFromHistory = (wordToRemove) => {  
    setSearchHistory(prev => prev.filter(item => item.word !== wordToRemove));  
  };  
  
  const handleSpeak = (word) => {  
    if ('speechSynthesis' in window) {  
      const utterance = new SpeechSynthesisUtterance(word);  
      utterance.lang = 'en-US';  
      utterance.rate = 0.8;  
      utterance.pitch = 1;  
      speechSynthesis.speak(utterance);  
    }  
  };  
  
  const clearSearch = () => {  
    setSearchTerm('');  
    setSelectedWord(null);  
    searchInputRef.current?.focus();  
  };  
  
  const handleKeyPress = (e) => {  
    if (e.key === 'Enter') {  
      handleSearch(searchTerm);  
    }  
  };  
  
  const handleSynonymClick = (synonym) => {  
    setSearchTerm(synonym);  
    handleSearch(synonym);  
  };  
  
  return (  
    <div   
      className="dictionary-page"  
      style={{  
        backgroundImage: "url('/images/background.jpg')",  
        backgroundSize: 'cover',  
        backgroundPosition: 'center',  
        backgroundRepeat: 'no-repeat',  
        backgroundAttachment: 'fixed'  
      }}  
    >  
      <div className="dictionary-container">  
        <div className="dictionary-header">  
          <img className="logo-h" src="/logo.jpg" alt="Logo" />  
          <h1>T·ª´ ƒëi·ªÉn Anh-Vi·ªát</h1>  
          <p>Tra c·ª©u t·ª´ v·ª±ng ti·∫øng Anh v·ªõi nghƒ©a ti·∫øng Vi·ªát</p>  
        </div>  
  
        <div className="search-container">  
          <div className="search-input-wrapper">  
            <input  
              ref={searchInputRef}  
              type="text"  
              className="search-input"  
              placeholder="Nh·∫≠p t·ª´ ti·∫øng Anh c·∫ßn tra..."  
              value={searchTerm}  
              onChange={(e) => setSearchTerm(e.target.value)}  
              onKeyPress={handleKeyPress}  
            />  
            {searchTerm && (  
              <button className="clear-button" onClick={clearSearch}>  
                ‚úï  
              </button>  
            )}  
            <button   
              className="search-button"   
              onClick={() => handleSearch(searchTerm)}  
              disabled={loading}  
            >  
              {loading ? '‚è≥' : 'üîç'}  
            </button>  
          </div>  
        </div>  
  
        {loading && (  
          <div className="loading-container">  
            <div className="loading-spinner">üîÑ</div>  
            <p>ƒêang t√¨m ki·∫øm v√† d·ªãch...</p>  
          </div>  
        )}  
  
        {selectedWord && !loading && (  
          <div className="word-result">  
            <div className="word-header">  
              <div className="word-main">  
                <h2 className="word-title">{selectedWord.word}</h2>  
                <div className="word-details">  
                  {selectedWord.phonetic && (  
                    <span className="word-phonetic">{selectedWord.phonetic}</span>  
                  )}  
                  <span className="word-part-of-speech">({selectedWord.partOfSpeech})</span>  
                </div>  
              </div>  
              <button   
                className="speak-button"  
                onClick={() => handleSpeak(selectedWord.word)}  
                aria-label="Nghe ph√°t √¢m"  
                title="Nghe ph√°t √¢m"  
              >  
                <img src="/Speaker.jpg" alt="Nghe ph√°t √¢m" className="speaker-icon" />  
              </button>  
            </div>  
  
            <div className="word-content">  
              <div className="word-meaning">  
                <h3>Nghƒ©a ti·∫øng Vi·ªát:</h3>  
                <p className="meaning-text primary-meaning">{selectedWord.meaning}</p>  
                  
                {/* Hi·ªÉn th·ªã c√°c nghƒ©a b·ªï sung n·∫øu c√≥ */}  
                {selectedWord.additionalMeanings && selectedWord.additionalMeanings.length > 0 && (  
                  <div className="additional-meanings">  
                    <h4>C√°c nghƒ©a kh√°c:</h4>  
                    <ul className="meanings-list">  
                      {selectedWord.additionalMeanings.map((meaning, index) => (  
                        <li key={index} className="meaning-item">{meaning}</li>  
                      ))}  
                    </ul>  
                  </div>  
                )}  
              </div>  
  
              {/* M·∫´u c√¢u √°p d·ª•ng */}  
              {selectedWord.exampleSentences && selectedWord.exampleSentences.length > 0 && (  
                <div className="example-sentences">  
                  <h3>M·∫´u c√¢u √°p d·ª•ng:</h3>  
                  <ul className="sentences-list">  
                    {selectedWord.exampleSentences.map((sentence, index) => (  
                      <li key={index} className="sentence-item">  
                        <span className="sentence-text">"{sentence}"</span>  
                        <button   
                          className="sentence-speak-btn"  
                          onClick={() => handleSpeak(sentence)}  
                          title="Nghe ph√°t √¢m c√¢u"  
                        >  
                          üîä  
                        </button>  
                      </li>  
                    ))}  
                  </ul>  
                </div>  
              )}  
  
              {selectedWord.example && (  
                <div className="word-example">  
                  <h3>V√≠ d·ª•:</h3>  
                  <p className="example-text">"{selectedWord.example}"</p>  
                </div>  
              )}  
  
              {/* T·ª´ ƒë·ªìng nghƒ©a */}  
              {selectedWord.synonyms && selectedWord.synonyms.length > 0 && (  
                <div className="word-synonyms">  
                  <h3>T·ª´ ƒë·ªìng nghƒ©a:</h3>  
                  <div className="synonyms-list">  
                    {selectedWord.synonyms.map((synonym, index) => (  
                      <span   
                        key={index}   
                        className="synonym-item"  
                        onClick={() => handleSynonymClick(synonym)}  
                        title={`Tra t·ª´ "${synonym}"`}  
                      >  
                        {synonym}  
                      </span>  
                    ))}  
                  </div>  
                </div>  
              )}  
  
              {/* T·ª´ tr√°i nghƒ©a */}  
              {selectedWord.antonyms && selectedWord.antonyms.length > 0 && (  
                <div className="word-antonyms">  
                  <h3>T·ª´ tr√°i nghƒ©a:</h3>  
                  <div className="antonyms-list">  
                    {selectedWord.antonyms.map((antonym, index) => (  
                      <span   
                        key={index}   
                        className="antonym-item"  
                        onClick={() => handleSynonymClick(antonym)}  
                        title={`Tra t·ª´ "${antonym}"`}  
                      >  
                        {antonym}  
                      </span>  
                    ))}  
                  </div>  
                </div>  
              )}  
            </div>  
          </div>  
        )}  
  
        {/* L·ªãch s·ª≠ t√¨m ki·∫øm v·ªõi n√∫t x√≥a */}  
        {searchHistory.length > 0 && !selectedWord && (  
          <div className="search-history">  
            <div className="history-header">  
              <h3>L·ªãch s·ª≠ t√¨m ki·∫øm</h3>  
              <button className="clear-history-btn" onClick={clearHistory}>  
                üóëÔ∏è X√≥a t·∫•t c·∫£  
              </button>  
            </div>  
            <div className="history-items">  
              {searchHistory.map((item, index) => (  
                <div key={index} className="history-item">  
                  <div   
                    className="history-content"  
                    onClick={() => {  
                      setSearchTerm(item.word);  
                      setSelectedWord(item);  
                    }}  
                  >  
                    <span className="history-word">{item.word}</span>  
                    <span className="history-meaning">{item.meaning}</span>  
                  </div>  
                  <button   
                    className="remove-history-btn"  
                    onClick={(e) => {  
                      e.stopPropagation();  
                      removeFromHistory(item.word);  
                    }}  
                    title="X√≥a kh·ªèi l·ªãch s·ª≠"  
                  >  
                    ‚úï  
                  </button>  
                </div>  
              ))}  
            </div>  
          </div>  
        )}  
      </div>  
    </div>  
  );  
}  
  
export default DictionaryPage;