import React, { useState, useEffect, useCallback } from 'react';  
import { useParams } from 'react-router-dom';  
import './CardPage.css';  
  
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;  
const mic = SpeechRecognition ? new SpeechRecognition() : null;  
  
if (mic) {  
    mic.continuous = false;  
    mic.interimResults = false;  
}  
  
// H√†m ti·ªán √≠ch ƒë·ªÉ chuy·ªÉn ƒë·ªïi Katakana sang Hiragana  
const katakanaToHiragana = (str) => {  
    if (!str) return '';  
    return str.replace(/[\\u30a1-\\u30f6]/g, function (match) {  
        const chr = match.charCodeAt(0) - 0x60;  
        return String.fromCharCode(chr);  
    });  
};  
  
function CardPage() {  
    const { cardId } = useParams();  
    const [card, setCard] = useState(null);  
    const [loading, setLoading] = useState(true);  
    const [error, setError] = useState(null);  
    const [voices, setVoices] = useState([]);  
  
    const [activeWordForRecording, setActiveWordForRecording] = useState(null);  
    const [isRecording, setIsRecording] = useState(false);  
    const [transcriptions, setTranscriptions] = useState({});  
    const [feedbacks, setFeedbacks] = useState({});  
  
    // Load available voices - ƒë·∫∑c bi·ªát quan tr·ªçng cho iOS  
    useEffect(() => {  
        const loadVoices = () => {  
            const availableVoices = speechSynthesis.getVoices();  
            setVoices(availableVoices);  
        };  
  
        // Load voices immediately  
        loadVoices();  
          
        // iOS Safari c·∫ßn event listener ƒë·ªÉ load voices  
        if (speechSynthesis.onvoiceschanged !== undefined) {  
            speechSynthesis.onvoiceschanged = loadVoices;  
        }  
  
        return () => {  
            if (speechSynthesis.onvoiceschanged !== undefined) {  
                speechSynthesis.onvoiceschanged = null;  
            }  
        };  
    }, []);  
  
    // *** C·∫¢I TI·∫æN LOGIC KI·ªÇM TRA PH√ÅT √ÇM - KH·∫ÆC PH·ª§C V·∫§N ƒê·ªÄ CH·ªÆ HOA/TH∆Ø·ªúNG ***  
    const checkPronunciation = useCallback((wordObject, transcript) => {  
        // Chu·∫©n h√≥a v·ªÅ lowercase ƒë·ªÉ so s√°nh kh√¥ng ph√¢n bi·ªát ch·ªØ hoa/th∆∞·ªùng  
        const cleanedTranscript = transcript.replace(/[.,!?„ÄÇ]/g, '').trim().toLowerCase();  
        const userHiragana = katakanaToHiragana(cleanedTranscript);  
          
        // L·∫•y t·ª´ g·ªëc v√† l√†m s·∫°ch, chuy·ªÉn v·ªÅ lowercase  
        const originalWord = wordObject.word.replace(/[.,!?„ÄÇ]/g, '').trim().toLowerCase();  
          
        // L·∫•y t·ª´ Kanji (n·∫øu c√≥) v√† l√†m s·∫°ch, chuy·ªÉn v·ªÅ lowercase  
        const kanjiWord = wordObject.kanji ? wordObject.kanji.replace(/[.,!?„ÄÇ]/g, '').trim().toLowerCase() : null;  
  
        // So s√°nh k·∫øt qu·∫£ c·ªßa ng∆∞·ªùi d√πng v·ªõi c·∫£ Hiragana v√† Kanji (case-insensitive)  
        if (originalWord === cleanedTranscript || (kanjiWord && kanjiWord === cleanedTranscript) || originalWord === userHiragana) {  
            setFeedbacks(prev => ({ ...prev, [wordObject.word]: 'üéâ Ch√≠nh x√°c!' }));  
        } else {  
            setFeedbacks(prev => ({ ...prev, [wordObject.word]: 'ü§î Ch∆∞a ƒë√∫ng. Th·ª≠ l·∫°i!' }));  
        }  
    }, []);  
  
    // *** S·ª¨A ƒê·ªîI: NGƒÇN CH·∫∂N NH·∫¨N D·∫†NG TI·∫æNG VI·ªÜT ***  
    useEffect(() => {  
        fetch('/database.json')  
            .then((res) => {  
                if (!res.ok) {  
                    throw new Error(`HTTP error! status: ${res.status}`);  
                }  
                return res.json();  
            })  
            .then((data) => {  
                const foundCard = data.cards.find((c) => c.id === cardId);  
                if (foundCard) {  
                    setCard(foundCard);  
                    if (mic) {  
                        // *** QUAN TR·ªåNG: Ch·ªâ cho ph√©p ti·∫øng Anh ho·∫∑c ti·∫øng Nh·∫≠t ***  
                        if (foundCard.language === 'japanese') {  
                            mic.lang = 'ja-JP';  
                        } else {  
                            // M·∫∑c ƒë·ªãnh lu√¥n l√† ti·∫øng Anh, KH√îNG cho ph√©p ti·∫øng Vi·ªát  
                            mic.lang = 'en-US';  
                        }  
                    }  
                } else {  
                    setError('Kh√¥ng t√¨m th·∫•y b·ªô th·∫ª n√†y!');  
                }  
                setLoading(false);  
            })  
            .catch((err) => {  
                console.error("L·ªói khi t·∫£i d·ªØ li·ªáu th·∫ª:", err);  
                setError('Kh√¥ng th·ªÉ t·∫£i ƒë∆∞·ª£c d·ªØ li·ªáu th·∫ª. Vui l√≤ng ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n ho·∫∑c t·ªáp database.json.');  
                setLoading(false);  
            });  
    }, [cardId]);  
  
    useEffect(() => {  
        if (!mic) return;  
  
        const handleResult = (event) => {  
            if (!activeWordForRecording) return;  
            const transcript = event.results[0][0].transcript;  
            setTranscriptions(prev => ({ ...prev, [activeWordForRecording.word]: transcript }));  
            checkPronunciation(activeWordForRecording, transcript);  
        };  
  
        mic.onstart = () => setIsRecording(true);  
        mic.onend = () => {  
            setIsRecording(false);  
            setActiveWordForRecording(null);  
        };  
        mic.onerror = (event) => console.error('L·ªói nh·∫≠n d·∫°ng gi·ªçng n√≥i:', event.error);  
        mic.onresult = handleResult;  
  
        return () => {  
            mic.onstart = null;  
            mic.onend = null;  
            mic.onerror = null;  
            mic.onresult = null;  
        };  
    }, [activeWordForRecording, checkPronunciation]);  
  
    // *** C·∫¢I TI·∫æN H√ÄM PH√ÅT √ÇM CHO iOS V√Ä ANDROID ***  
    const handleSpeak = (wordToSpeak, phonetic) => {  
        if (!('speechSynthesis' in window) || !card) return;  
          
        let textToSpeak = wordToSpeak;  
        let targetLang = 'en-US';  
          
        // X·ª≠ l√Ω text v√† ng√¥n ng·ªØ  
        if (card.language === 'japanese') {  
            textToSpeak = phonetic || katakanaToHiragana(wordToSpeak);  
            targetLang = 'ja-JP';  
        }  
  
        const utterance = new SpeechSynthesisUtterance(textToSpeak);  
          
        // *** QUAN TR·ªåNG: Ch·ªçn voice ph√π h·ª£p cho iOS ***  
        if (voices.length > 0) {  
            let selectedVoice = null;  
              
            if (card.language === 'english') {  
                // ∆Øu ti√™n voice ti·∫øng Anh cho iOS  
                selectedVoice = voices.find(voice =>   
                    voice.lang.startsWith('en') &&   
                    (voice.name.includes('Samantha') || voice.name.includes('Alex') || voice.default)  
                ) || voices.find(voice => voice.lang.startsWith('en'));  
            } else {  
                // Voice ti·∫øng Nh·∫≠t  
                selectedVoice = voices.find(voice =>   
                    voice.lang.startsWith('ja')  
                );  
            }  
              
            if (selectedVoice) {  
                utterance.voice = selectedVoice;  
            }  
        }  
          
        // Thi·∫øt l·∫≠p c√°c thu·ªôc t√≠nh  
        utterance.lang = targetLang;  
        utterance.rate = 0.9;  
        utterance.pitch = 1;  
        utterance.volume = 1;  
          
        // ƒê·∫£m b·∫£o d·ª´ng speech tr∆∞·ªõc ƒë√≥ (quan tr·ªçng cho iOS)  
        speechSynthesis.cancel();  
          
        // Delay nh·ªè cho iOS Safari  
        setTimeout(() => {  
            speechSynthesis.speak(utterance);  
        }, 100);  
    };  
  
    // *** S·ª¨A ƒê·ªîI: TH√äM VALIDATION NG√îN NG·ªÆ TR∆Ø·ªöC KHI GHI √ÇM ***  
    const handleToggleRecording = (wordObject) => {  
        if (!mic) {  
            alert("Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ nh·∫≠n d·∫°ng gi·ªçng n√≥i.");  
            return;  
        }  
  
        // *** QUAN TR·ªåNG: ƒê·∫£m b·∫£o ng√¥n ng·ªØ ƒë∆∞·ª£c set ƒë√∫ng tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu ghi √¢m ***  
        if (card && card.language === 'japanese') {  
            mic.lang = 'ja-JP';  
        } else {  
            // Force English, KH√îNG cho ph√©p ti·∫øng Vi·ªát  
            mic.lang = 'en-US';  
        }  
  
        if (isRecording) {  
            mic.stop();  
        } else {  
            setTranscriptions(prev => ({ ...prev, [wordObject.word]: '' }));  
            setFeedbacks(prev => ({ ...prev, [wordObject.word]: '' }));  
            setActiveWordForRecording(wordObject);  
            try {  
                mic.start();  
            } catch (error) {  
                console.error("L·ªói khi b·∫Øt ƒë·∫ßu ghi √¢m:", error);  
            }  
        }  
    };  
  
    if (loading) return <div className="loading-container">ƒêang t·∫£i b·ªô th·∫ª...</div>;  
    if (error) return <div className="error-container">{error}</div>;  
    if (!card) return <div className="error-container">Kh√¥ng c√≥ d·ªØ li·ªáu th·∫ª.</div>;  
  
    return (  
        <div className="card-page-container">  
            <div className="card-header">  
                <img className="Logo-h" src="/logo.jpg" alt="Scaduwing Heroes Logo" />   
                <h1>{card.theme}</h1>  
                <p>B·ªô th·∫ª: {card.language === 'english' ? 'Ti·∫øng Anh' : 'Ti·∫øng Nh·∫≠t'}</p>  
            </div>  
            <div className="vocab-list">  
                {card.vocabulary.map((item) => (  
                    <div className="vocab-item" key={item.word}>  
                        <div className="vocab-main">  
                            <div className="vocab-text">  
                                <span className="vocab-word">{item.word}{item.kanji && ` (${item.kanji})`}</span>  
                                <span className="vocab-phonetic">{item.phonetic}</span>  
                            </div>  
                            <span className="vocab-meaning">{item.meaning}</span>  
                        </div>  
                        <div className="vocab-actions">  
                            <button onClick={() => handleSpeak(item.word, item.phonetic)} className="speak-button" aria-label="Nghe ph√°t √¢m">  
                                <img src="/Speaker.jpg" alt="Nghe ph√°t √¢m" className="button-icon" />  
                            </button>  
                            <button  
                                onClick={() => handleToggleRecording(item)}  
                                className={`record-button ${isRecording && activeWordForRecording?.word === item.word ? 'recording' : ''}`}  
                                disabled={isRecording && activeWordForRecording?.word !== item.word}  
                                aria-label="Ghi √¢m v√† ki·ªÉm tra"  
                            >  
                                <img src="/Mic.jpg" alt="Ghi √¢m" className="button-icon" />  
                            </button>  
                        </div>  
  
                        {isRecording && activeWordForRecording?.word === item.word && (  
                            <div className="recording-indicator">üéôÔ∏è ƒêang ghi √¢m...</div>  
                        )}  
  
                        {transcriptions[item.word] && (  
                            <div className="transcript">B·∫°n ƒë√£ n√≥i: <strong>"{transcriptions[item.word]}"</strong></div>  
                        )}  
                        {feedbacks[item.word] && (  
                            <div className={`feedback ${feedbacks[item.word].includes('Ch√≠nh x√°c') ? 'correct' : 'incorrect'}`}>  
                                {feedbacks[item.word]}  
                            </div>  
                        )}  
                    </div>  
                ))}  
            </div>  
  
            <footer className="card-page-footer">  
                <p>&copy; {new Date().getFullYear()} T2N team. All rights reserved.</p>  
            </footer>  
        </div>  
    );  
}  
  
export default CardPage;